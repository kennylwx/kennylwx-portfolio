{"version":3,"sources":["webpack:///./src/components/updatestype.js","webpack:///./src/pages/blog-list.js"],"names":["UpdatesType","title","desc","date","path","projectLink","repoLink","className","Date","to","target","rel","href","defaultProps","BlogList","pageQuery","allMarkdownRemark","edges","map","post","key","node","id","frontmatter","excerpt"],"mappings":"6wCAAA,2FASA,SAASA,EAAT,GAEI,IADFC,EACC,EADDA,MAAOC,EACN,EADMA,KAAMC,EACZ,EADYA,KAAMC,EAClB,EADkBA,KAAMC,EACxB,EADwBA,YAAaC,EACrC,EADqCA,SA+CtC,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAcJ,KAAM,IAAIK,KAAKL,MAG/B,yBAAKI,UAAU,0BACb,kBAAC,OAAD,CAAME,GAAIL,EAAMG,UAAU,wBACxB,yBAAKA,UAAU,sBACZN,GAEH,yBAAKM,UAAU,qBACZL,IAxBPG,GAAeC,EAEf,yBAAKC,UAAU,sBAnCfD,EAEA,uBACEI,OAAO,SACPC,IAAI,sBACJC,KAAMN,EACNC,UAAU,wBAEV,kBAAC,IAAD,OAKC,KAIHF,EAEA,uBACEK,OAAO,SACPC,IAAI,sBACJC,KAAMP,EACNE,UAAU,wBAEV,kBAAC,IAAD,OAIC,MAYA,QAoCXP,EAAYa,aAAe,CACzBP,SAAU,GACVD,YAAa,IAGAL,O,kHC5BAc,UA1Df,WACE,IAAMC,EAAS,OA8Bf,OACE,kBAAC,IAAD,KACE,yBAAKR,UAAU,aACb,wBAAIA,UAAU,mBALN,cAQR,yBAAKA,UAAU,uBAEbQ,EAAUC,kBAAkBC,MAAMC,KAAI,SAACC,GAAD,OACpC,kBAAC,IAAD,CACEC,IAAKD,EAAKE,KAAKC,GACfrB,MAAOkB,EAAKE,KAAKE,YAAYtB,MAC7BC,KAAMiB,EAAKE,KAAKG,QAChBrB,KAAMgB,EAAKE,KAAKE,YAAYpB,KAC5BC,KAAMe,EAAKE,KAAKE,YAAYnB,KAC5BC,YAAac,EAAKE,KAAKE,YAAYlB,YACnCC,SAAUa,EAAKE,KAAKE,YAAYjB,mB","file":"component---src-pages-blog-list-js-bc6a62b7fca7c3f79135.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport ReactTimeAgo from 'react-time-ago';\nimport GithubIcon from '../assets/icons/github.svg';\nimport LinkIcon from '../assets/icons/link.svg';\n\n\nfunction UpdatesType({\n  title, desc, date, path, projectLink, repoLink,\n}) {\n  const renderRepoLink = () => {\n    if (repoLink) {\n      return (\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={repoLink}\n          className=\"updates-type-links-1\"\n        >\n          <GithubIcon />\n        </a>\n      );\n    }\n\n    return null;\n  };\n\n  const renderProjectLink = () => {\n    if (projectLink) {\n      return (\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={projectLink}\n          className=\"updates-type-links-2\"\n        >\n          <LinkIcon />\n        </a>\n      );\n    }\n    return null;\n  };\n\n  const renderLinks = () => {\n    if (projectLink || repoLink) {\n      return (\n        <div className=\"updates-type-links\">\n          {renderRepoLink()}\n          {renderProjectLink()}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"updates-type\">\n      <div className=\"updates-type-info\">\n        <div className=\"updates-type-date\">\n          <ReactTimeAgo date={new Date(date)} />\n        </div>\n\n        <div className=\"updates-type-container\">\n          <Link to={path} className=\"updates-type-details\">\n            <div className=\"updates-type-title\">\n              {title}\n            </div>\n            <div className=\"updates-type-desc\">\n              {desc}\n            </div>\n          </Link>\n          {renderLinks()}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nUpdatesType.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  desc: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  repoLink: PropTypes.string,\n  projectLink: PropTypes.string,\n};\n\nUpdatesType.defaultProps = {\n  repoLink: '',\n  projectLink: '',\n};\n\nexport default UpdatesType;\n","import React from 'react';\nimport {\n  useStaticQuery,\n  graphql,\n} from 'gatsby';\nimport '../styles/blog-list.scss';\nimport Layout from '../components/layout';\nimport UpdatesType from '../components/updatestype';\n\nfunction BlogList() {\n  const pageQuery = useStaticQuery(\n    graphql`\n      query BlogIndexAllQuery {\n        allMarkdownRemark(\n          sort: {\n            fields: [frontmatter___date, frontmatter___title]\n            order: DESC\n          }\n        ) {\n          edges {\n            node {\n              id\n              frontmatter {\n                author\n                date\n                path\n                title\n                projectLink\n                repoLink\n              }\n              excerpt(format: PLAIN)\n            }\n          }\n        }\n      } \n    `,\n  );\n\n  const title = 'Blog Posts';\n\n  return (\n    <Layout>\n      <div className=\"blog-list\">\n        <h1 className=\"blog-list-title\">\n          {title}\n        </h1>\n        <div className=\"blog-list-container\">\n          {\n          pageQuery.allMarkdownRemark.edges.map((post) => (\n            <UpdatesType\n              key={post.node.id}\n              title={post.node.frontmatter.title}\n              desc={post.node.excerpt}\n              date={post.node.frontmatter.date}\n              path={post.node.frontmatter.path}\n              projectLink={post.node.frontmatter.projectLink}\n              repoLink={post.node.frontmatter.repoLink}\n            />\n          ))\n        }\n        </div>\n      </div>\n    </Layout>\n\n  );\n}\n\nexport default BlogList;\n"],"sourceRoot":""}